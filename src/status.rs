use std::{num::ParseIntError, str::FromStr};

#[allow(clippy::enum_variant_names)]
#[derive(Debug, PartialEq, Eq, Default, Copy, Clone)]
pub enum Status {
	Continue = 100,
	SwitchingProtocols = 101,
	Processing = 102,
	EarlyHints = 103,
	#[default]
	Ok = 200,
	Created = 201,
	Accepted = 202,
	NonAuthoritativeInformation = 203,
	NoContent = 204,
	ResetContent = 205,
	PartialContent = 206,
	MultiStatus = 207,
	AlreadyReported = 208,
	IMUsed = 226,
	MultipleChoices = 300,
	MovedPermanently = 301,
	Found = 302,
	SeeOther = 303,
	NotModified = 304,
	UseProxy = 305,
	TemporaryRedirect = 307,
	PermanentRedirect = 308,
	BadRequest = 400,
	Unauthorized = 401,
	PaymentRequired = 402,
	Forbidden = 403,
	NotFound = 404,
	MethodNotAllowed = 405,
	NotAcceptable = 406,
	ProxyAuthenticationRequired = 407,
	RequestTimeout = 408,
	Conflict = 409,
	Gone = 410,
	LengthRequired = 411,
	PreconditionFailed = 412,
	PayloadTooLarge = 413,
	URITooLong = 414,
	UnsupportedMediaType = 415,
	RangeNotSatisfiable = 416,
	ExpectationFailed = 417,
	ImATeapot = 418,
	MisdirectedRequest = 421,
	UnprocessableEntity = 422,
	Locked = 423,
	FailedDependency = 424,
	TooEarly = 425,
	UpgradeRequired = 426,
	PreconditionRequired = 428,
	TooManyRequests = 429,
	RequestHeaderFieldsTooLarge = 431,
	UnavailableForLegalReasons = 451,
	InternalServerError = 500,
	NotImplemented = 501,
	BadGateway = 502,
	ServiceUnavailable = 503,
	GatewayTimeout = 504,
	HTTPVersionNotSupported = 505,
	VariantAlsoNegotiates = 506,
	InsufficientStorage = 507,
	LoopDetected = 508,
	NotExtended = 510,
	NetworkAuthenticationRequired = 511,
}

#[derive(Debug)]
pub enum ParseStatusError {
	ParseIntError(ParseIntError),
	InvalidStatusCode,
}

impl FromStr for Status {
	type Err = ParseStatusError;

	fn from_str(s: &str) -> Result<Self, Self::Err> {
		(s.parse::<u16>().map_err(Self::Err::ParseIntError)?)
			.try_into()
			.map_err(|_| Self::Err::InvalidStatusCode)
	}
}

#[derive(Debug)]
pub struct InvalidStatus;

impl TryFrom<u16> for Status {
	type Error = InvalidStatus;

	fn try_from(value: u16) -> Result<Self, Self::Error> {
		match value {
			100 => Ok(Self::Continue),
			101 => Ok(Self::SwitchingProtocols),
			102 => Ok(Self::Processing),
			103 => Ok(Self::EarlyHints),
			200 => Ok(Self::Ok),
			201 => Ok(Self::Created),
			202 => Ok(Self::Accepted),
			203 => Ok(Self::NonAuthoritativeInformation),
			204 => Ok(Self::NoContent),
			205 => Ok(Self::ResetContent),
			206 => Ok(Self::PartialContent),
			207 => Ok(Self::MultiStatus),
			208 => Ok(Self::AlreadyReported),
			226 => Ok(Self::IMUsed),
			300 => Ok(Self::MultipleChoices),
			301 => Ok(Self::MovedPermanently),
			302 => Ok(Self::Found),
			303 => Ok(Self::SeeOther),
			304 => Ok(Self::NotModified),
			305 => Ok(Self::UseProxy),
			307 => Ok(Self::TemporaryRedirect),
			308 => Ok(Self::PermanentRedirect),
			400 => Ok(Self::BadRequest),
			401 => Ok(Self::Unauthorized),
			402 => Ok(Self::PaymentRequired),
			403 => Ok(Self::Forbidden),
			404 => Ok(Self::NotFound),
			405 => Ok(Self::MethodNotAllowed),
			406 => Ok(Self::NotAcceptable),
			407 => Ok(Self::ProxyAuthenticationRequired),
			408 => Ok(Self::RequestTimeout),
			409 => Ok(Self::Conflict),
			410 => Ok(Self::Gone),
			411 => Ok(Self::LengthRequired),
			412 => Ok(Self::PreconditionFailed),
			413 => Ok(Self::PayloadTooLarge),
			414 => Ok(Self::URITooLong),
			415 => Ok(Self::UnsupportedMediaType),
			416 => Ok(Self::RangeNotSatisfiable),
			417 => Ok(Self::ExpectationFailed),
			418 => Ok(Self::ImATeapot),
			421 => Ok(Self::MisdirectedRequest),
			422 => Ok(Self::UnprocessableEntity),
			423 => Ok(Self::Locked),
			424 => Ok(Self::FailedDependency),
			425 => Ok(Self::TooEarly),
			426 => Ok(Self::UpgradeRequired),
			428 => Ok(Self::PreconditionRequired),
			429 => Ok(Self::TooManyRequests),
			431 => Ok(Self::RequestHeaderFieldsTooLarge),
			451 => Ok(Self::UnavailableForLegalReasons),
			500 => Ok(Self::InternalServerError),
			501 => Ok(Self::NotImplemented),
			502 => Ok(Self::BadGateway),
			503 => Ok(Self::ServiceUnavailable),
			504 => Ok(Self::GatewayTimeout),
			505 => Ok(Self::HTTPVersionNotSupported),
			506 => Ok(Self::VariantAlsoNegotiates),
			507 => Ok(Self::InsufficientStorage),
			508 => Ok(Self::LoopDetected),
			510 => Ok(Self::NotExtended),
			511 => Ok(Self::NetworkAuthenticationRequired),
			_ => Err(InvalidStatus),
		}
	}
}

impl Status {
	pub fn reason_phrase(&self) -> &str {
		match self {
			Self::Continue => "Continue",
			Self::SwitchingProtocols => "Switching Protocols",
			Self::Processing => "Processing",
			Self::EarlyHints => "Early Hints",
			Self::Ok => "OK",
			Self::Created => "Created",
			Self::Accepted => "Accepted",
			Self::NonAuthoritativeInformation => "Non-Authoritative Information",
			Self::NoContent => "No Content",
			Self::ResetContent => "Reset Content",
			Self::PartialContent => "Partial Content",
			Self::MultiStatus => "Multi-Status",
			Self::AlreadyReported => "Already Reported",
			Self::IMUsed => "IM Used",
			Self::MultipleChoices => "Multiple Choices",
			Self::MovedPermanently => "Moved Permanently",
			Self::Found => "Found",
			Self::SeeOther => "See Other",
			Self::NotModified => "Not Modified",
			Self::UseProxy => "Use Proxy",
			Self::TemporaryRedirect => "Temporary Redirect",
			Self::PermanentRedirect => "Permanent Redirect",
			Self::BadRequest => "Bad Request",
			Self::Unauthorized => "Unauthorized",
			Self::PaymentRequired => "Payment Required",
			Self::Forbidden => "Forbidden",
			Self::NotFound => "Not Found",
			Self::MethodNotAllowed => "Method Not Allowed",
			Self::NotAcceptable => "Not Acceptable",
			Self::ProxyAuthenticationRequired => "Proxy Authentication Required",
			Self::RequestTimeout => "Request Timeout",
			Self::Conflict => "Conflict",
			Self::Gone => "Gone",
			Self::LengthRequired => "Length Required",
			Self::PreconditionFailed => "Precondition Failed",
			Self::PayloadTooLarge => "Payload Too Large",
			Self::URITooLong => "URI Too Long",
			Self::UnsupportedMediaType => "Unsupported Media Type",
			Self::RangeNotSatisfiable => "Range Not Satisfiable",
			Self::ExpectationFailed => "Expectation Failed",
			Self::ImATeapot => "I'm a teapot",
			Self::MisdirectedRequest => "Misdirected Request",
			Self::UnprocessableEntity => "Unprocessable Entity",
			Self::Locked => "Locked",
			Self::FailedDependency => "Failed Dependency",
			Self::TooEarly => "Too Early",
			Self::UpgradeRequired => "Upgrade Required",
			Self::PreconditionRequired => "Precondition Required",
			Self::TooManyRequests => "Too Many Requests",
			Self::RequestHeaderFieldsTooLarge => "Request Header Fields Too Large",
			Self::UnavailableForLegalReasons => "Unavailable For Legal Reasons",
			Self::InternalServerError => "Internal Server Error",
			Self::NotImplemented => "Not Implemented",
			Self::BadGateway => "Bad Gateway",
			Self::ServiceUnavailable => "Service Unavailable",
			Self::GatewayTimeout => "Gateway Timeout",
			Self::HTTPVersionNotSupported => "HTTP Version Not Supported",
			Self::VariantAlsoNegotiates => "Variant Also Negotiates",
			Self::InsufficientStorage => "Insufficient Storage",
			Self::LoopDetected => "Loop Detected",
			Self::NotExtended => "Not Extended",
			Self::NetworkAuthenticationRequired => "Network Authentication Required",
		}
	}
}
